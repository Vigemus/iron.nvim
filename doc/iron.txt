*iron.nvim* Interactive Repls Over Neovim

===============================================================================
CONTENTS                                                            *iron-help*

  Introduction............................|iron-introduction|
  Awesomeness.............................|iron-awesomeness|
  Languages...............................|iron-languages|
  Commands................................|iron-commands|
  Functions...............................|iron-functions|
  Customizing.............................|iron-customizing|
  Mappings................................|iron-mappings|
  Extending...............................|iron-extending|
  Credits.................................|iron-credits|

===============================================================================
Introduction                                                *iron-introduction*

Iron is a helper plugin that allows you to manage and interact with live
Read-Eval-Print-Loops (REPLs) directly from Neovim, through terminal buffers.
Iron mostly interacts with plugins via stdin/stdout, with few exceptions.

===============================================================================
Awesomeness                                                  *iron-awesomeness*

Iron makes it very easy to focus on the code while interacting with the REPL.
It allows you to, seamlessly, send chunks of code directly into the REPL,
without disrupting your coding workflow.

A lot more can be accomplished through Iron. In order to add new functionality
(such as running tests, evaluating expressions, adding new keybindings, etc),
all it takes is to extend the REPL providers.

===============================================================================
Languages                                                      *iron-languages*

Currently, Iron has support for the following programming languages:

  - clojure
    - boot
    - lein
  - cpp
    - root https://root.cern.ch/
  - csh
    - csh
    - tcsh
  - elixir
  - elm
  - erlang
  - fennel
  - forth
  - haskell
    - intero
    - stack ghci
    - ghci
  - hylang
  - javascript
  - julia
  - lisp
    - sbcl
    - clisp
  - lua
  - ocaml
    - ocamltop
    - utop
  - php
    - php
    - psysh
  - prolog
    - gprolog
    - swipl
  - ps1 (powershell)
  - pure-lang
  - python
    - python
    - ipython
    - ptpython
    - ptipython
  - r
  - racket
  - ruby
  - scala
    - scala
    - sbt
  - scheme
    - guile
    - csi
  - sh
    - zsh
    - bash
    - sh
  - stata
  - tcl
  - typescript
  - zsh


===============================================================================
Commands                                                        *iron-commands*

Iron provides the following commands for interacting with REPLs:

:IronRepl [ft]
  Open a REPL for current or given file type.

:IronReplHere [ft]
  Open a REPL for current or given file type in the current window.

:IronRestart
  Restart the current REPL.

:IronSend[!] some [text...]
  Sends the supplied chunk of text to the repl for current filetype.
  If used with a `!`, the first argument is the filetype
  This allows for invoking a new repl immediatelly:
      > :IronSend! python print(20 * 32)

:IronFocus [ft]
  Focuses on the repl for current or given file type.


===============================================================================
Functions                                                      *iron-functions*

Iron is a lua plugin as as so all its functionality is exposed through lua
functions.

The code is mainly divided in two major namespaces:
- `iron.core`, for most user-facing functions and
- `iron.lowlevel` for the functions that interact with the repl directly

The code is well documented, so we'll skip `iron.lowlevel` in this doc.

Below are the core functions:

* core.repl_here(ft)        Creates a repl in the same window

* core.repl_restart()       Restarts the repl in the current window or for the
                            current buffer's filetype

* core.close_repl(ft)       Closes the repl for supplied filetype

* core.repl_for(ft)         Creates a repl for given filetype in a new window

* core.focus_on(ft)         Moves to (or creates) the repl for given filetype

* core.send(ft, data)       Sends data (a table) to the repl for given filetype

* core.send_line()          Sends line below the cursor to the repl

* core.send_motion(motion)  Applies given motion and sends the result to the repl
                            see `send_motion` in |iron-mappings|

* core.repeat_cmd()         Re-sends the last block to the repl

* core.setup(config)        Configures iron. See |iron-customizing|

For more information, check the luadocs in the functions.

===============================================================================
Customizing                                                  *iron-customizing*

Iron is configured through `core.setup`

Below is a sample config:

```
local iron = require("iron.core")

iron.setup{
  config = {
    -- Highlights the last sent block with bold
    highlight_last = "IronLastSent",

    -- Toggling behavior is on by default.
    -- Other options are: `single` and `focus`
    visibility = require("iron.visibility").toggle,

    -- Scope of the repl
    -- By default it is one for the same `pwd`
    -- Other options are `tab_based` and `singleton`
    scope = require("iron.scope").path_based,

    -- Wether the repl buffer is a "throwaway" buffer or not
    scratch_repl = false,

    -- Automatically closes the repl window on process end
    close_window_on_exit = true,
    repl_definition = {
     -- forcing a default
      python = require("iron.fts.python").ipython

     -- new, custom repl
      lua = {
        command = {"my-lua-repl", "-arg"}
      }
    },
    -- Wether iron should map the `<plug>(..)` mappings
    should_map_plug = true,

    -- Repl position. Check `iron.view` for more options
    repl_open_cmd = require("iron.view").curry.bottom(40),
    -- Alternatively, pass a function, which is evalueated when a repl is open.
    repl_open_cmd = require('iron.view').curry.right(function()
        return vim.o.columns / 2
    end),

    -- If the repl buffer is listed
    buflisted = false,
  },

  -- All the keymaps are set individually
  -- Below is a suggested default
  keymaps = {
    send_motion = "<space>sc",
    visual_send = "<space>sc",
    send_line = "<space>sl",
    repeat_cmd = "<space>s.",
    cr = "<space>s<cr>",
    interrupt = "<space>s<space>",
    exit = "<space>sq",
    clear = "<space>cl",
  }
}
```

===============================================================================
Mappings                                                        *iron-mappings*

Iron by default doesn't map the keybindings, only those supplied in the
core.setup function.

- send_motion: Sends a motion to the repl
- visual_send: Sends the visual selection to the repl
- send_line: Sends the line below the cursor to the repl
- repeat_cmd: Repeats the last sent block
- cr: Sends a return to the repl
- interrupt: Sends a `<C-c>` signal to the repl
- exit: Exits the repl
- clear: Clears the repl window

===============================================================================
Extending                                                      *iron-extending*

Iron provides some modules that can be used on your configuration to change the
behavior:

* `iron.memory_management`:
  It provides three memory management modes for your repls:
  * `tab_based`:
    It saves all the variables based on your tab, so new tabs create new repls.
  * `path_based` (default):
    It saves all the variables according to your base path (pwd),
    so changing the cd/tcd/lcd will create new repls.
  * `singleton`:
    It will never create two repls for the same filetype.

* `iron.visibility`:
  It changes the behavior on how iron deals with windows for the repl.
  * `single`:
    Ensures that a window exists and shows it;
  * `toggle` (default):
    Alternates between opening and closing the window
  * `focus`:
    Moves the focus to the repl window.

===============================================================================
Credits                                                          *iron-credits*

Plugin created by Henry Kupty <hkupty@gmail.com>.
It is free to use and extend. Please consider opening a pull request if
extended.

Source at https://github.com/hkupty/iron.nvim
