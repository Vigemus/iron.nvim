*iron.nvim* Interactive Repls Over Neovim

===============================================================================
CONTENTS                                                            *iron-help*

  Introduction............................|iron-introduction|
  Awesomeness.............................|iron-awesomeness|
  Languages...............................|iron-languages|
  Commands................................|iron-commands|
  Functions...............................|iron-functions|
  Customizing.............................|iron-customizing|
  Mappings................................|iron-mappings|
  Extending...............................|iron-extending|
  LuaFunctions............................|iron-lua-functions|
  Credits.................................|iron-credits|

===============================================================================
Introduction                                                *iron-introduction*

Iron is a helper plugin that allows you to manage and interact with live
Read-Eval-Print-Loops (REPLs) directly from Neovim, through terminal buffers.
Iron mostly interacts with plugins via stdin/stdout, with few exceptions.

===============================================================================
Awesomeness                                                  *iron-awesomeness*

Iron makes it very easy to focus on the code while interacting with the REPL.
It allows you to, seamlessly, send chunks of code directly into the REPL,
without disrupting your coding workflow.

A lot more can be accomplished through Iron. In order to add new functionality
(such as running tests, evaluating expressions, adding new keybindings, etc),
all it takes is to extend the REPL providers.

===============================================================================
Languages                                                      *iron-languages*

Currently, Iron has support for the following programming languages:

  - clojure
    - boot
    - lein
  - csh
    - csh
    - tcsh
  - elixir
  - elm
  - erlang
  - haskell
    - intero
    - stack ghci
    - ghci
  - javascript
  - julia
  - lisp
    - sbcl
    - clisp
  - lua
  - ocaml
    - ocamltop
    - utop
  - php
    - php
    - psysh
  - prolog
    - gprolog
    - swipl
  - ps1 (powershell)
  - pure-lang
  - python
    - python
    - ipython
    - ptpython
    - ptipython
  - r
  - racket
  - ruby
  - scala
    - scala
    - sbt
  - scheme
    - guile
    - csi
  - sh
    - zsh
    - bash
    - sh
  - tcl
  - typescript
  - zsh


===============================================================================
Commands                                                        *iron-commands*

Iron provides the following commands for interacting with REPLs:

:IronRepl [ft]
  Open a REPL for current or given file type.

:IronSend! some [text...]
  Sends the supplied chunk of text to the repl for current filetype.

:IronSend ft some [text...]
  Sends the supplied chunk of text to given filetype.

:IronFocus [ft]
  Focuses on the repl for current or given file type.

:IronWatchCurrentFile some [text...]
  Sends the given argument string to the repl of current filetype when the file is saved.

:IronUnwatchCurrentFile
  Removes watch from current file.


===============================================================================
Functions                                                      *iron-functions*

Iron provides the following functions for interacting with REPLs:

IronWatchFile(fname, command)
  Sends the given command to the repl current filetype when the file is saved.


IronUnwatchFile(fname)
  Removes watch from given file.


===============================================================================
Customizing                                                  *iron-customizing*

To change iron's behavior, change the following variables:

g:iron_map_defaults
  Provide default global mappings (see |iron-mappings|) to send a chunk of text
  to a REPL (ctr) and to repeat the previous command (cp). Default value = 1.

g:iron_map_extended
  Maps additional keybindings to iron

===============================================================================
Mappings                                                        *iron-mappings*

ctr
  send a chunk of text to REPL. Works with motions.
cp
  repeat the previous command

Those hereabove mappings can be redefined by the user, i.e: >

  nmap <localleader>t <Plug>(iron-send-motion)
<

  -------------------------------------------------------------~
   LHS(default)     RHS                                  MODE~
  -------------------------------------------------------------~
   ctr              |<Plug>(iron-send-motion)|              `nv`
   cp               |<Plug>(iron-repeat-cmd|                `n`
  -------------------------------------------------------------~

===============================================================================
Extending                                                      *iron-extending*

Iron is written in lua where all the logic can easily be managed and extended.
To do that, add the following snippet to your init.vim:

lua << EOF
local iron = require("iron")

iron.core.set_config{
  -- your configuration goes here
}

EOF

Iron provides some modules that can be used on your configuration to change the
behavior:

* `iron.memory_management`:
  It provides three memory management modes for your repls:
  * `tab_based`:
    It saves all the variables based on your tab, so new tabs create new repls.
  * `path_based` (default):
    It saves all the variables according to your base path (pwd),
    so changing the cd/tcd/lcd will create new repls.
  * `singleton`:
    It will never create two repls for the same filetype.

* `iron.debug_level`:
  It changes how iron logs the messages:
  * `fatal`
  * `err`
  * `warn`
  * `info`

* `iron.visibility`:
  It changes the behavior on how iron deals with windows for the repl.
  * `single`:
    Ensures that a window exists and shows it;
  * `toggle` (default):
    Alternates between opening and closing the window
  * `focus`:
    Moves the focus to the repl window.

The keys for configuring iron are the following:

* `manager`:
  For the memory management function
* `visibility`:
  For the window visibility function
* `debug_level`:
  For the debug level
* `preferred`:
  Preferred repl definition for a filetype
* `repl_open_cmd`:
  Command to be run when creating a new window for the repl.
  It can be a string or a function.

An example of configuration would be the following:

lua << EOF
local iron = require("iron")

local vis = function(buffer_id, show_fn)
  -- Check if window exists, is visible...
end

local open_repl = function(buffer)
  vim.api.nvim_open_win(buffer, ....)
end

iron.core.set_config{
  preferred = {
    python = 'ipython'
  },
  repl_open_cmd = open_repl
}

EOF

===============================================================================
LuaFunctions                                               *iron-lua-functions*

The following are public iron functions that can be used to spawn a repl,
send data to a repl or configure iron is some way:

* `iron.core.repl_for(ft)`:
  Creates a repl for given ft.

* `iron.core.focus_on(ft)`:
  Focuses on a repl for given ft.
  Creates if it doesn't exist.

* `iron.core.set_config(cfg)`:
  Sets configuration based on the given parameters.
  It merges the given options with the default values.

* `iron.core.add_repl_definitions(defns)`:
  Adds repl definitions to iron.
  Example:
lua << EOF
local iron = require("iron")

iron.core.add_repl_definitions{
  myft = {
    mydefn = {
      command = {"my-command"},
      open = ":begin", -- multiline block begin
      close = {":end", ""} -- multiline block end with two lines
    }
  }
EOF


* `iron.core.send(ft, data)`:
  Sends data repl for given ft.
  Creates if it doesn't exist.

* `iron.core.send_line()`:
  Sends current line to repl (for current filetype).
  Creates if it doesn't exist.

* `iron.core.send_motion(mtype)`:
  Sends the current motion to the repl.
  Creates if it doesn't exist.

* `iron.core.visual_send()`:
  Sends visual selection to the repl.
  Creates if it doesn't exist.

* `iron.core.repeat_cmd()`:
  Resends the last block to the repl.
  Creates if it doesn't exist.

* `iron.core.list_fts()`:
  Returns a list of current file types iron supports.

* `iron.core.list_definitions_for_ft(ft)`:
  Returns a table with the definitions supported for given filetype.

* `iron.debug.dump(level, to_buff)`:
  Prints the log messages.
  If level is omitted, prints everything.
  If to_buff is supplied, prints to a buffer instead of message.

* `iron.debug.definitions(lang)`:
  Prints the definitions for language.
  if lang is omitted, prints everything.

* `iron.debug.memory()`:
  Prints current memory module.


===============================================================================
Credits                                                          *iron-credits*

Plugin created by Henry Kupty <hkupty@gmail.com>.
It is free to use and extend. Please consider opening a pull request if
extended.

Source at https://github.com/hkupty/iron.nvim
